WEBVTT

1
00:00:08.757 --> 00:00:13.620
A pivot table is a way of summarizing data
in a data frame for a particular purpose.

2
00:00:13.620 --> 00:00:16.610
It makes heavy use of
the aggregation function.

3
00:00:16.610 --> 00:00:20.830
A pivot table is itself a data frame,
where the rows represent one variable that

4
00:00:20.830 --> 00:00:25.770
you're interested in, the columns another,
and the cell's some aggregate value.

5
00:00:25.770 --> 00:00:29.190
A pivot table also tends to
includes marginal values as well,

6
00:00:29.190 --> 00:00:31.590
which are the sums for
each column and row.

7
00:00:31.590 --> 00:00:36.030
This allows you to be able to see the
relationship between two variables at just

8
00:00:36.030 --> 00:00:36.640
a glance.

9
00:00:36.640 --> 00:00:38.980
Let's take a look at an example.

10
00:00:38.980 --> 00:00:42.713
Here we'll load a new data set, cars.csv.

11
00:00:42.713 --> 00:00:46.275
This data set comes from the Open Data
Initiative of the Canadian government.

12
00:00:46.275 --> 00:00:49.774
And has information about the efficiency
of different electric cars which

13
00:00:49.774 --> 00:00:52.070
are available for purchase.

14
00:00:52.070 --> 00:00:54.326
When we look at the head
of the data frame,

15
00:00:54.326 --> 00:00:58.837
we'll see that there are model years,
vendors, sizes of cars, and statistics,

16
00:00:58.837 --> 00:01:01.364
like how big the battery
is in kilowatt hours.

17
00:01:01.364 --> 00:01:06.009
A pivot table allows us to pivot out one
of these columns into a new column headers

18
00:01:06.009 --> 00:01:09.980
and compare it against another
column as row indices.

19
00:01:09.980 --> 00:01:10.770
For instance,

20
00:01:10.770 --> 00:01:15.360
let's say we wanted to compare the makes
of electric vehicles versus the years and

21
00:01:15.360 --> 00:01:19.770
that we wanted to do this comparison
in terms of battery capacity.

22
00:01:19.770 --> 00:01:23.500
To do this, we tell pandas we
want the values to be kilowatts,

23
00:01:23.500 --> 00:01:27.240
the index to be the year and
the columns to be the make.

24
00:01:27.240 --> 00:01:30.369
Then we specify that
the aggregation function,

25
00:01:30.369 --> 00:01:32.667
and here we'll use the NumPy mean.

26
00:01:32.667 --> 00:01:34.030
Here's the results.

27
00:01:34.030 --> 00:01:35.806
We see there are NaN values for

28
00:01:35.806 --> 00:01:39.918
vendors who didn't have an entry
in a given year like Ford in 2012.

29
00:01:39.918 --> 00:01:43.937
And we see that most vendors don't have a
change in battery capacity over the years,

30
00:01:43.937 --> 00:01:47.010
except for Tesla,
as they've introduced several new models.

31
00:01:48.270 --> 00:01:52.250
Now, pivot tables aren't limited to one
function that you might want to apply.

32
00:01:52.250 --> 00:01:55.905
You can pass aggfunc, a list of
the different functions to apply,

33
00:01:55.905 --> 00:02:00.110
and pandas will provide you with the
result using hierarchical column names.

34
00:02:00.110 --> 00:02:02.822
Here, Iâ€™ll also pass margins equals true.

35
00:02:02.822 --> 00:02:06.882
And that you can see for each of
the functions there's now an all category,

36
00:02:06.882 --> 00:02:10.687
which shows the overall mean and
the minimum values for a given year and

37
00:02:10.687 --> 00:02:11.610
a given vendor.

38
00:02:12.790 --> 00:02:14.300
So that's pivot tables.

39
00:02:14.300 --> 00:02:16.190
This has been a pretty short description,
but

40
00:02:16.190 --> 00:02:19.180
they're incredibly useful when
dealing with numeric data.

41
00:02:19.180 --> 00:02:22.670
And of course, you can pass any function
you want to the aggregate function,

42
00:02:22.670 --> 00:02:24.460
including those that you define yourself.
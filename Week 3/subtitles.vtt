WEBVTT

1
00:00:08.408 --> 00:00:10.520
Welcome to today's tutorial.

2
00:00:10.520 --> 00:00:15.960
Where we'll be looking at the time series and
date functionally in Pandas.

3
00:00:16.350 --> 00:00:18.820
Pandas has four main time related classes.

4
00:00:18.820 --> 00:00:22.740
Timestamp, DatetimeIndex,
Period, and PeriodIndex.

5
00:00:22.740 --> 00:00:25.250
First, let's look at Timestamp.

6
00:00:25.250 --> 00:00:30.989
Timestamp represents a single timestamp
and associates values with points in time.

7
00:00:31.733 --> 00:00:35.665
For example,
let's create a timestamp using a string

8
00:00:35.665 --> 00:00:42.460
9/1/2016 10:05AM, and
here we have our timestamp.

9
00:00:42.460 --> 00:00:47.980
Timestamp is interchangeable with
Python's datetime in most cases.

10
00:00:48.130 --> 00:00:51.270
Suppose we weren't interested
in a specific point in time, and

11
00:00:51.270 --> 00:00:53.760
instead wanted a span of time.

12
00:00:53.760 --> 00:00:56.240
This is where Period comes into play.

13
00:00:56.230 --> 00:01:01.810
Period represents a single time span,
such as a specific day or month.

14
00:01:01.470 --> 00:01:06.470
Here we are creating a Period
that is January 2016,

15
00:01:06.470 --> 00:01:12.480
and here's an example of
a Period that is March 5th, 2016.

16
00:01:12.480 --> 00:01:16.720
The index of a timestamp
is DatetimeIndex.

17
00:01:17.720 --> 00:01:19.820
Let's look at a quick example.

18
00:01:19.820 --> 00:01:23.886
First, let's create our example series t1,

19
00:01:23.886 --> 00:01:29.220
we'll use the timestamp of September 1st,
2nd and 3rd of 2016.

20
00:01:31.689 --> 00:01:36.883
When we look at the series,
each timestamp is the index and

21
00:01:36.883 --> 00:01:41.090
has a value associated with it,
in this case, a, b and c.

22
00:01:42.330 --> 00:01:48.070
Looking at the type of our series index,
we see that it's DatetimeIndex.

23
00:01:48.740 --> 00:01:53.650
Similarly, the index of
Period is PeriodIndex.

24
00:01:53.840 --> 00:01:56.140
Let's create another example series t2.

25
00:01:56.140 --> 00:02:02.990
This time, we'll use the values d,
e, and f and

26
00:02:02.990 --> 00:02:07.154
match them with the Period September,
October and November 2016

27
00:02:09.000 --> 00:02:15.490
Looking at the type of the ts2.index,
we can see that it's PeriodIndex.

28
00:02:17.490 --> 00:02:21.840
Now, let's look into how
to convert to Datetime.

29
00:02:21.950 --> 00:02:25.840
Suppose we have a list
of dates as strings.

30
00:02:25.890 --> 00:02:29.860
If we create a DataFrame using
these dates as the index,

31
00:02:29.860 --> 00:02:34.850
and some minimally generated data,
this is the DataFrame we get.

32
00:02:36.600 --> 00:02:40.140
Looking at the index we can
see that's pretty messy and

33
00:02:40.140 --> 00:02:42.620
the dates are all in different formats.

34
00:02:42.900 --> 00:02:48.440
Using pandas to_datetime, 
pandas will try to convert these

35
00:02:48.440 --> 00:02:51.570
to Datetime and
put them in a standard format.

36
00:02:52.560 --> 00:02:57.330
to_datetime also has options
to change the date parse order.

37
00:02:57.800 --> 00:03:01.920
For example, we can pass in
the argument dayfirst = True to

38
00:03:02.000 --> 00:03:05.760
parse the date in European date format.

39
00:03:06.310 --> 00:03:09.049
Timedeltas are differences in times.

40
00:03:09.049 --> 00:03:13.490
We can see that when we take
the difference between September 3rd and

41
00:03:13.490 --> 00:03:15.390
September 1st.

42
00:03:15.390 --> 00:03:16.250
We get a Timedelta of two days.

43
00:03:16.580 --> 00:03:22.088
We can also do something like find what
the date and time is for 12 days and

44
00:03:22.088 --> 00:03:26.223
three hours past September 2nd,
at 8:10 AM.

45
00:03:28.800 --> 00:03:32.620
Next, let's look at a few tricks for
working with dates in a DataFrame.

46
00:03:33.730 --> 00:03:37.591
Suppose we want to look at nine
measurements, taken bi-weekly,

47
00:03:37.591 --> 00:03:38.740
every Sunday.

48
00:03:38.740 --> 00:03:40.960
Starting in October 2016.

49
00:03:42.960 --> 00:03:46.555
Using date range,
we can create this DatetimeIndex.

50
00:03:48.369 --> 00:03:52.285
Now, let's create DataFrame using
these dates, and some random data, and

51
00:03:52.285 --> 00:03:54.621
see what we can do with it.

52
00:03:58.427 --> 00:04:02.400
First, we can check what day of
the week a specific date is.

53
00:04:02.400 --> 00:04:07.960
For example, here we can see that all
the dates in our index are on a Sunday.

54
00:04:12.360 --> 00:04:15.360
We can use diff to find the difference
between each date's value.

55
00:04:15.310 --> 00:04:21.780
Suppose we wanted to know what the mean
count is for each month in our DataFrame.

56
00:04:21.980 --> 00:04:24.671
We can do this using resample.

57
00:04:24.762 --> 00:04:30.883
We can use partial string indexing to
find values from a particular year or

58
00:04:30.883 --> 00:04:37.480
from a particular month, or
we can even slice on a range of dates.

59
00:04:37.480 --> 00:04:42.710
For example, here we only want
the values from December 2016 onwards.

60
00:04:43.930 --> 00:04:47.010
Another cool thing we can do is change the
frequency of our dates in our DataFrame

61
00:04:47.010 --> 00:04:50.780
using asfreq.

62
00:04:51.050 --> 00:04:54.450
If we use this to change the frequency
from bi-weekly to weekly

63
00:04:54.450 --> 00:04:57.370
We'll end up with missing
values every other week.

64
00:04:57.370 --> 00:05:01.900
So let's use the forward fill
method on those missing values.

65
00:05:02.050 --> 00:05:06.170
One last thing I wanted to briefly
touch upon is plotting time series.

66
00:05:07.600 --> 00:05:13.710
Importing matplotlib.pyplot, and using
the iPython magic %matplotlib inline,

67
00:05:13.710 --> 00:05:16.070
will allow you to visualize
the time series.

68
00:05:18.820 --> 00:05:20.523
In the next course,
we will learn more about understanding and

69
00:05:20.523 --> 00:05:22.747
creating visualizations.

70
00:05:22.747 --> 00:05:25.000
Thanks for watching, see you next time.